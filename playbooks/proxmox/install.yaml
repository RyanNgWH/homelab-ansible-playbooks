# @format

# Proxmox
# Install and configure the Proxmox hypervisor.
---
- name: Setup repositories
  become: true
  block:
    - name: Enable no-subscription respository
      ansible.builtin.template:
        src: templates/host.pve-no-subscription.list
        dest: /etc/apt/sources.list.d/pve-no-subscription.list
        owner: root
        group: root
        mode: "0644"

    - name: Disable pve enterprise respository
      ansible.builtin.copy:
        content: "# deb https://enterprise.proxmox.com/debian/pve {{ ansible_distribution_release }} pve-enterprise"
        dest: /etc/apt/sources.list.d/pve-enterprise.list
        owner: root
        group: root
        mode: "0644"

    - name: Disable ceph enterprise respository
      ansible.builtin.copy:
        content: "# deb https://enterprise.proxmox.com/debian/ceph-quincy {{ ansible_distribution_release }} enterprise"
        dest: /etc/apt/sources.list.d/ceph.list
        owner: root
        group: root
        mode: "0644"

    - name: Disable no subscription nagging message
      ansible.builtin.copy:
        src: files/host.no-nag-script
        dest: /etc/apt/apt.conf.d/no-nag-script
        owner: root
        group: root
        mode: "0644"
      notify: Reinstall proxmox-widget toolkit

    - name: Update apt cache, upgrade packages and remove unused dependencies
      ansible.builtin.apt:
        update_cache: true
        upgrade: dist
        autoremove: true
        purge: true

- name: Execute debian 12 setup
  ansible.builtin.import_role:
    name: debian-12-setup

- name: Install Intel microcode updates
  become: true
  ansible.builtin.apt:
    name: intel-microcode
    update_cache: true
    state: present

- name: Enable PCIe passthrough
  become: true
  block:
    - name: Check if IMMOU is enabled in grub
      ansible.builtin.command:
        cmd: grep -c "intel_immou=on" /etc/default/grub
      register: immou_exists
      changed_when: false
      failed_when: immou_exists.rc == 2

    - name: Ensure IOMMU is enabled in kernel
      ansible.builtin.lineinfile:
        path: /etc/default/grub
        regexp: '^(GRUB_CMDLINE_LINUX_DEFAULT=.*)"$'
        line: '\1 intel_immou=on"'
        backrefs: true
        state: present
      when: immou_exists.stdout == "0"

    - name: Check if IMMOU passthrough is enabled in grub
      ansible.builtin.command:
        cmd: grep -c "iommu=pt" /etc/default/grub
      register: immou_passthrough_exists
      changed_when: false
      failed_when: immou_passthrough_exists.rc == 2

    - name: Ensure IOMMU passthrough is enabled in kernel
      ansible.builtin.lineinfile:
        path: /etc/default/grub
        regexp: '^(GRUB_CMDLINE_LINUX_DEFAULT=.*)"$'
        line: '\1 iommu=pt"'
        backrefs: true
        state: present
      when: immou_passthrough_exists.stdout == "0"

    - name: Ensure vfio kernel module is loaded
      community.general.modprobe:
        name: vfio
        persistent: present
        state: present

    - name: Ensure vfio_iommu_type1 kernel module is loaded
      community.general.modprobe:
        name: vfio_iommu_type1
        persistent: present
        state: present

    - name: Ensure vfio_pci kernel module is loaded
      community.general.modprobe:
        name: vfio_pci
        persistent: present
        state: present

    - name: Ensure vfio-pci configurations are set
      ansible.builtin.copy:
        content: "options vfio-pci ids={{ pcie_passthrough_ids }} disable_vga=1"
        dest: /etc/modprobe.d/vfio.conf
        owner: root
        group: root
        mode: "0644"

- name: Setup cpu frequency scaling governor
  become: true
  ansible.builtin.cron:
    name: set-cpufreq-governor
    job: echo "{{ cpufreq_governor }}" | tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor
    special_time: reboot
    user: root
    state: present

- name: Setup networking
  become: true
  block:
    - name: Install Open vSwitch
      ansible.builtin.apt:
        name: openvswitch-switch
        update_cache: true
        state: present

    - name: Configure network interfaces
      ansible.builtin.copy:
        src: files/host.interfaces
        dest: /etc/network/interfaces
        owner: root
        group: root
        mode: "0644"
      notify: Reload network configuration

- name: Setup users
  become: true
  block:
    - name: Create groups
      ansible.builtin.group:
        name: "{{ item.name }}"
        state: present
      loop: "{{ proxmox_host_users }}"
      no_log: true

    - name: Create users
      ansible.builtin.user:
        name: "{{ item.name }}"
        group: "{{ item.name }}"
        groups: "{{ item.groups if item.groups is defined }}"
        password: "{{ item.pass }}"
        shell: "{{ item.shell }}"
        comment: "{{ item.name }}"
        create_home: true
        state: present
      loop: "{{ proxmox_host_users }}"
      no_log: true

    - name: "Add SSH authorised key for users"
      ansible.posix.authorized_key:
        user: "{{ item.name }}"
        key: "{{ item.ssh_public_key }}"
        state: present
      loop: "{{ proxmox_host_users }}"
      no_log: true

    - name: Add users sudoers rules
      community.general.sudoers:
        name: "{{ item.sudo.name }}"
        user: "{{ item.sudo.user }}"
        host: "{{ item.sudo.host }}"
        runas: "{{ item.sudo.runas }}"
        nopassword: "{{ item.sudo.nopassword }}"
        commands: "{{ item.sudo.commands }}"
        state: present
      loop: "{{ proxmox_host_users }}"
      no_log: true

- name: Setup proxmox managment interface access
  become: true
  block:
    - name: Create groups
      ansible.builtin.command: pveum group add {{ item.name }} --comment "[Ansible] {{ item.comment }}"
      loop: "{{ proxmox_ve_groups }}"
      register: pve_groups_create
      changed_when: pve_groups_create.rc == 0
      failed_when: pve_groups_create.rc != 0 and pve_groups_create.rc != 255

    - name: Setup groups details
      ansible.builtin.command: pveum group modify {{ item.name }} --comment "[Ansible] {{ item.comment }}"
      loop: "{{ proxmox_ve_groups }}"
      register: pve_groups_modify
      changed_when: pve_groups_modify.rc == 0
      failed_when: pve_groups_modify.rc != 0
      when: not pve_groups_create.changed

    - name: Setup users
      ansible.builtin.command: pveum user add {{ item.name }}@{{ item.realm }} --comment "[Ansible] {{ item.comment }}" {{ '--email ' + '"' + item.email + '"' if item.email is defined }} --enable {{ item.enable }} --groups {{ item.groups}} {{ '--password "' + item.pass + '"' if item.pass is defined }} # noqa: yaml[line-length]
      loop: "{{ proxmox_ve_users }}"
      register: pve_users_create
      changed_when: pve_users_create.rc == 0
      failed_when: pve_users_create.rc != 0 and pve_users_create.rc != 2
      no_log: true

    - name: Setup users details
      ansible.builtin.command: pveum user modify {{ item.name }}@{{ item.realm }} --comment "[Ansible] {{ item.comment }}" {{ '--email ' + '"' + item.email + '"' if item.email is defined }} --enable {{ item.enable }} --groups {{ item.groups}} # noqa: yaml[line-length]
      loop: "{{ proxmox_ve_users }}"
      register: pve_users_modify
      changed_when: pve_users_modify.rc == 0
      failed_when: pve_users_modify.rc != 0
      when: not pve_users_create.changed
      no_log: true

    - name: Modify & disable root user
      ansible.builtin.command: pveum user modify root@pam --comment "[Ansible] [Sierra] Proxmox root user" --email "admin@tinynamoo.com" --enable false --groups admins # noqa: yaml[line-length]
      register: pve_user_root
      changed_when: pve_user_root.rc == 0

    - name: Setup access roles
      ansible.builtin.command: pveum role add {{ item.name }} --privs "{{ item.privileges }}"
      loop: "{{ proxmox_ve_roles }}"
      register: pve_roles_create
      changed_when: pve_roles_create.rc == 0
      failed_when: pve_roles_create.rc != 0 and pve_roles_create.rc != 255

    - name: Setup access roles details
      ansible.builtin.command: pveum role modify {{ item.name }} --privs "{{ item.privileges }}"
      loop: "{{ proxmox_ve_roles }}"
      register: pve_roles_modify
      changed_when: pve_roles_modify.rc == 0
      failed_when: pve_roles_modify.rc != 0
      when: not pve_roles_create.changed

    - name: Setup permissions
      ansible.builtin.command: pveum acl modify "{{ item.path }}" --roles "{{ item.roles }}" --groups "{{ item.groups }}" --propagate {{ item.propagate }}
      loop: "{{ proxmox_ve_permissions }}"
      register: pve_permissions
      changed_when: pve_permissions.rc == 0
      failed_when: pve_permissions.rc != 0

- name: Setup storage
  become: true
  ansible.builtin.command: pvesm set {{ item.storage }} --content "{{ item.content | join(',') }}"
  loop: "{{ proxmox_ve_storages }}"
  register: pve_storages
  changed_when: pve_storages.rc == 0
  failed_when: pve_storages.rc != 0

- name: Setup notifications
  become: true
  block:
    - name: Create notifications file
      ansible.builtin.file:
        path: /etc/pve/notifications.cfg
        owner: root
        group: www-data
        mode: "0640"
        state: touch

    - name: Setup notifications configuration
      ansible.builtin.copy:
        src: files/proxmox.notifications.cfg
        dest: /etc/pve/notifications.cfg
        owner: root
        group: www-data
        mode: "0640"

- name: Install and configure nginx reverse proxy
  vars:
    debian_common_task_list:
      - nginx
    nginx_tls_domains:
      - "{{ ansible_host }}"
  ansible.builtin.include_role:
    name: debian-common

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Setup sanoid/syncoid zfs backup orchestration
  become: true
  block:
    - name: Ensure sanoid private key folder is present
      ansible.builtin.file:
        path: /root/.ssh/sanoid
        owner: root
        group: root
        mode: "0700"
        state: directory

    - name: Copy sanoid private key to server
      ansible.builtin.copy:
        src: "{{ sanoid_private_key_file }}"
        dest: /root/.ssh/sanoid/id_ed25519
        owner: "root"
        group: "root"
        mode: "0600"

    - name: Install sanoid packages
      ansible.builtin.apt:
        name:
          - sanoid
          - lz4
        update_cache: true
        state: present

    - name: Ensure sanoid configuration folder is present
      ansible.builtin.file:
        path: /etc/sanoid
        owner: root
        group: root
        mode: "0755"
        state: directory

    - name: Setup sanoid configuration file
      ansible.builtin.copy:
        src: files/sanoid.sanoid.conf
        dest: /etc/sanoid/sanoid.conf
        owner: root
        group: root
        mode: "0644"

    - name: Ensure syncoid configuration folder is present
      ansible.builtin.file:
        path: /etc/sanoid/syncoid
        owner: root
        group: root
        mode: "0755"
        state: directory

    - name: Setup syncoid configuration files
      ansible.builtin.copy:
        src: files/syncoid.{{ item }}.env
        dest: /etc/sanoid/syncoid/{{ item }}.env
        owner: root
        group: root
        mode: "0644"
      loop: "{{ syncoid_targets }}"

    - name: Setup syncoid systemd service for pulling backups
      ansible.builtin.copy:
        src: files/syncoid.syncoid.service
        dest: /etc/systemd/system/syncoid@.service
        owner: root
        group: root
        mode: "0644"

    - name: Create syncoid systemd timer for scheduling backups
      ansible.builtin.copy:
        src: files/syncoid.syncoid.timer
        dest: /etc/systemd/system/syncoid@.timer
        owner: root
        group: root
        mode: "0644"

    - name: Enable and start syncoid timers
      ansible.builtin.systemd_service:
        name: "syncoid@{{ item }}.timer"
        daemon_reload: true
        enabled: true
        state: started
      loop: "{{ syncoid_targets }}"

- name: Setup scrutiny spoke for disk SMART monitoring
  ansible.builtin.import_tasks: ../scrutiny/deploy.yaml
