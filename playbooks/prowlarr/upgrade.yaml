# @format

# Prowlarr
# Upgrade Prowlarr indexer managment server
---
- name: Get application current and latest versions
  ansible.builtin.include_tasks: get-versions.yaml
  loop:
    - name: prowlarr
      docker_name: "{{ prowlarr_docker_name }}"
      docker_user: linuxserver
      docker_repo: docker-prowlarr
    - name: flaresolverr
      docker_name: "{{ flaresolverr_docker_name }}"
      docker_user: FlareSolverr
      docker_repo: FlareSolverr

- name: Check if applications have updates
  block:
    - name: Check if applications have updates
      ansible.builtin.set_fact:
        prowlarr_has_updates: "{{ prowlarr_image_version != prowlarr_latest_version }}"
        flaresolverr_has_updates: "{{ flaresolverr_image_version != flaresolverr_latest_version }}"

    - name: Stop play if applications have no updates
      ansible.builtin.meta: end_play
      when: "(not prowlarr_has_updates) and (not flaresolverr_has_updates)"

- name: Take snapshot of Proxmox instance
  ansible.builtin.import_role:
    name: proxmox
    public: false
  vars:
    proxmox_task_list: snapshot
    proxmox_snapshot_name: "{{ 'pre_upgrade_' + (prowlarr_image_version | regex_replace('[.]', '-')) + '_' + (flaresolverr_image_version | regex_replace('[.]', '-')) }}" # noqa: yaml[line-length]
    proxmox_snapshot_description: |
      [Ansible] Working snapshot of prowlarr

      Current:
        prowlarr: {{ prowlarr_image_version }}
        flaresolverr: {{ flaresolverr_image_version }}

      New:
        prowlarr: {{ prowlarr_latest_version }}
        flaresolverr: {{ flaresolverr_latest_version }}
  delegate_to: localhost

- name: Upgrade Prowlarr indexer managment server
  become: true
  block:
    - name: Update apt cache, upgrade packages and remove unused dependencies
      ansible.builtin.apt:
        update_cache: true
        upgrade: dist
        autoremove: true
        purge: true

    - name: Update & start Prowlarr docker containers
      become: true
      community.docker.docker_compose_v2:
        project_name: "{{ docker_project_name }}"
        project_src: "{{ docker_project_src }}"
        remove_orphans: true
        services: "{{ item.services }}"
        pull: always
        state: present
      loop:
        - services:
            - "{{ prowlarr_docker_name }}"
            - postgres
          condition: "{{ prowlarr_has_updates }}"
        - services: "{{ flaresolverr_docker_name }}"
          condition: "{{ flaresolverr_has_updates }}"
      when: item.condition

    - name: Prune unused docker objects
      community.docker.docker_prune:
        builder_cache_all: true
        containers: true
        images: true
        networks: true
        volumes: true
