services:
  piped-frontend:
    container_name: piped-frontend
    image: 1337kavin/piped-frontend:latest
    environment:
      BACKEND_HOSTNAME: {{ piped_backend_hostname }}
    restart: unless-stopped
    depends_on:
      - piped

  piped-proxy:
    container_name: piped-proxy
    image: 1337kavin/piped-proxy:latest
    environment:
      - UDS=1
    volumes:
      - piped-proxy:/app/socket
    restart: unless-stopped

  piped:
    container_name: piped-backend
    image: 1337kavin/piped:latest
    volumes:
      - ./config/config.properties:/app/config.properties:ro
    depends_on:
      - postgres
    restart: unless-stopped

  nginx:
    container_name: nginx
    image: nginx:mainline-alpine
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/pipedapi.conf:/etc/nginx/conf.d/pipedapi.conf:ro
      - ./config/pipedproxy.conf:/etc/nginx/conf.d/pipedproxy.conf:ro
      - ./config/pipedfrontend.conf:/etc/nginx/conf.d/pipedfrontend.conf:ro
      - ./config/ytproxy.conf:/etc/nginx/snippets/ytproxy.conf:ro
      - piped-proxy:/var/run/ytproxy
    ports:
      - "8080:80"
    restart: unless-stopped
    depends_on:
      - piped
      - piped-proxy
      - piped-frontend

  postgres:
    container_name: postgres
    image: postgres:15
    environment:
      - POSTGRES_DB=piped
      - POSTGRES_USER=piped
      - POSTGRES_PASSWORD="{{ piped_database_password }}"
    volumes:
      - {{ nfs_mounts.twyla.mount_point }}/data/db:/var/lib/postgresql/data
    restart: unless-stopped
    user: {{ nfs_user_id }}:{{ nfs_user_id }}

  watchtower:
    container_name: watchtower
    image: containrrr/watchtower
    command: piped-frontend piped-backend piped-proxy varnish nginx postgres watchtower
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_RESTARTING=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/timezone:/etc/timezone:ro
    restart: always

volumes:
  piped-proxy: null
