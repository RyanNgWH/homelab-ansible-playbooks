# @format

# Radarr
# Upgrade Radarr movies management server
---
- name: Check if radarr requires update
  become: true
  block:
    - name: Get current radarr container version
      ansible.builtin.import_role:
        name: docker
        public: false
      vars:
        docker_task_list: get_container_image_version
        docker_container_name: "{{ radarr_docker_name }}"
        docker_fact_name: radarr

    - name: Get latest radarr container release from github
      community.general.github_release:
        user: linuxserver
        repo: docker-radarr
        action: latest_release
      delegate_to: localhost
      register: radarr_github_release

    - name: Extract latest radarr container version
      ansible.builtin.set_fact:
        radarr_latest_version: "{{ radarr_github_release.tag }}"

    - name: Stop play if radarr has no updates
      ansible.builtin.meta: end_play
      when: radarr_image_version == radarr_latest_version

- name: Take snapshot of Proxmox instance
  ansible.builtin.import_role:
    name: proxmox
    public: false
  vars:
    proxmox_task_list: snapshot
    proxmox_snapshot_name: "{{ 'pre-upgrade-radarr' + (radarr_image_version | regex_replace('[.|-]', '_')) }}"
    proxmox_snapshot_description: "[Ansible] Working snapshot of radarr {{ radarr_image_version }} before upgrading to {{ radarr_latest_version }}"
  delegate_to: localhost

- name: Upgrade Radarr movies management server
  become: true
  block:
    - name: Update apt cache, upgrade packages and remove unused dependencies
      ansible.builtin.apt:
        update_cache: true
        upgrade: dist
        autoremove: true
        purge: true

    - name: Update & start radarr container
      become: true
      community.docker.docker_compose_v2:
        project_name: "{{ docker_project_name }}"
        project_src: "{{ docker_project_src }}"
        remove_orphans: true
        services:
          - "{{ radarr_docker_name }}"
          - "{{ radarr_docker_name }}4k"
          - "{{ radarr_docker_name }}-anime"
          - postgres
        pull: always
        state: present

    - name: Prune unused docker objects
      community.docker.docker_prune:
        builder_cache_all: true
        containers: true
        images: true
        networks: true
        volumes: true
