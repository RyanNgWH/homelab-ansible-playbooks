# @format

# Network Attached Storage
# Install and configure the Network Attached Storage server.
---
- name: Setup ZFS
  become: true
  block:
    - name: Install linux headers package
      ansible.builtin.apt:
        name: linux-headers-amd64
        update_cache: true
        state: present

    # Ensures upstream stable patches is tracked and compatibility is always maintained
    - name: Install zfs utils package from debian backports
      ansible.builtin.apt:
        name: zfsutils-linux
        default_release: stable-backports
        update_cache: true
        state: present
      notify: Reboot system

    - name: Flush handlers
      ansible.builtin.meta: flush_handlers

    - name: Ensure root secrets directory is present
      ansible.builtin.file:
        path: /root/.secrets
        owner: root
        group: root
        mode: "0700"
        state: directory

    - name: Setup zfs dataset keyfiles
      ansible.builtin.copy:
        content: "{{ item.password }}"
        dest: "/root/.secrets/{{ item.pool }}-{{ item.dataset }}"
        owner: root
        group: root
        mode: "0400"
      loop: "{{ zfs_datasets }}"
      no_log: true

    - name: Create systemd service for loading zfs keys
      ansible.builtin.copy:
        src: files/zfs.load-key.service
        dest: /etc/systemd/system/zfs-load-key@.service
        owner: root
        group: root
        mode: "0644"

    - name: Check if zpool is imported
      ansible.builtin.command: "zpool list {{ zfs_zpool_name }}"
      register: zpool_import_check
      changed_when: false
      failed_when: zpool_import_check.rc != 0 and zpool_import_check.rc != 1

    - name: Import zpool if required
      ansible.builtin.command: "zpool import -f -d /dev/disk/by-id {{ zfs_zpool_name }}"
      changed_when: true
      when: zpool_import_check.rc == 1

    - name: Enable and start zfs keys loading service
      ansible.builtin.systemd_service:
        name: "zfs-load-key@{{ item.pool }}-{{ item.dataset }}.service"
        daemon_reload: true
        enabled: true
        state: started
      loop: "{{ zfs_datasets }}"
      no_log: true

    - name: Ensure all datasets are mounted
      ansible.builtin.command: zfs mount -a
      changed_when: true

- name: Setup NFSv4 server
  become: true
  block:
    - name: Install NFS & Kerberos packages
      ansible.builtin.apt:
        name:
          - nfs-kernel-server
          - nfs-common
          - krb5-kdc
          - krb5-admin-server
          - gssproxy
        update_cache: true
        state: present

    - name: Setup kerberos configuration file (krb5.conf)
      ansible.builtin.template:
        src: templates/kerberos.krb5.conf
        dest: /etc/krb5.conf
        owner: root
        group: root
        mode: "0644"

    - name: Setup kdc configuration file (kdc.conf)
      ansible.builtin.template:
        src: templates/kerberos.kdc.conf
        dest: /etc/krb5kdc/kdc.conf
        owner: root
        group: root
        mode: "0644"

    - name: Setup kdc access control list
      ansible.builtin.template:
        src: templates/kerberos.kadm5.acl
        dest: /etc/krb5kdc/kadm5.acl
        owner: root
        group: root
        mode: "0644"

    - name: Copy kdc stash file to server
      ansible.builtin.copy:
        src: "{{ krb5_key_stash_file }}"
        dest: /etc/krb5kdc/stash
        owner: root
        group: root
        mode: "0600"

    - name: Copy keytab file to server
      ansible.builtin.copy:
        src: "{{ nfs_krb5_host_keytab_file }}"
        dest: /etc/krb5.keytab
        owner: root
        group: root
        mode: "0600"

    - name: Ensure domain is set in idmapd.conf
      ansible.builtin.lineinfile:
        path: /etc/idmapd.conf
        line: "Domain = {{ nfs_idmapd_domain }}"
        regexp: ".*Domain = .*"
        state: present

    - name: Setup export mountpoints
      ansible.posix.mount:
        src: "{{ item.src }}"
        path: "{{ item.dest }}"
        fstype: none
        opts: "bind,nofail,_netdev"
        state: mounted
      loop: "{{ nfs_exports }}"

    - name: Setup exports
      ansible.builtin.template:
        src: templates/nfs.exports
        dest: /etc/exports
        owner: root
        group: root
        mode: "0644"

    - name: Restart krb5-kdc service
      ansible.builtin.systemd_service:
        name: krb5-kdc.service
        state: restarted

    - name: Disable NFSv3
      ansible.builtin.lineinfile:
        path: /etc/nfs.conf
        line: "vers3=n"
        regexp: ".*vers3.*"
        state: present

    - name: Ensure NFS groups are present
      ansible.builtin.group:
        name: "{{ item.value.name }}"
        gid: "{{ item.value.gid }}"
        system: true
        state: present
      loop: "{{ nfs_groups | dict2items }}"

    - name: Ensure NFS client groups are present
      ansible.builtin.group:
        name: "{{ item.value.name }}"
        gid: "{{ item.value.uid }}"
        system: true
        state: present
      loop: "{{ nfs_clients | dict2items }}"

    - name: Ensure NFS client users are present
      ansible.builtin.user:
        name: "{{ item.value.name }}"
        group: "{{ item.value.name }}"
        groups: "{{ item.value.groups if item.value.groups is defined else '' }}"
        password: "*"
        shell: /usr/sbin/nologin
        create_home: false
        uid: "{{ item.value.uid }}"
        state: present
      loop: "{{ nfs_clients | dict2items }}"

    - name: Restart nfs server
      ansible.builtin.systemd_service:
        name: nfs-server.service
        state: restarted

- name: Setup Samba server
  become: true
  block:
    - name: Install Samba packages
      ansible.builtin.apt:
        name:
          - samba
          - samba-client
        update_cache: true
        state: present

    - name: Setup samba configuration file
      ansible.builtin.template:
        src: templates/samba.smb.conf
        dest: /etc/samba/smb.conf
        owner: root
        group: root
        mode: "0644"

    - name: Enable and start samba service
      ansible.builtin.systemd_service:
        name: smb.service
        daemon_reload: true
        enabled: true
        state: started

    - name: Ensure samba client groups are present
      ansible.builtin.group:
        name: "{{ item.value.name }}"
        gid: "{{ item.value.uid }}"
        system: false
        state: present
      no_log: true
      loop: "{{ samba_users | dict2items }}"

    - name: Ensure samba client users are present
      ansible.builtin.user:
        name: "{{ item.value.name }}"
        group: "{{ item.value.name }}"
        groups: "{{ item.value.groups if item.value.groups is defined else '' }}"
        password: "*"
        shell: /usr/sbin/nologin
        create_home: false
        uid: "{{ item.value.uid }}"
        state: present
      no_log: true
      loop: "{{ samba_users | dict2items }}"

    - name: Create Samba users if they don't exist yet
      ansible.builtin.shell: >
        set -o nounset -o pipefail -o errexit &&
        (pdbedit --user={{ item.value.name }} 2>&1 > /dev/null) \
        || (echo '{{ item.value.password }}'; echo '{{ item.value.password }}') \
        | smbpasswd -s -a {{ item.value.name }}
      args:
        executable: /bin/bash
      no_log: true
      register: samba_create_users
      changed_when: "'Added user' in samba_create_users.stdout"
      loop: "{{ samba_users | dict2items }}"

    - name: Set Samba users passwords
      ansible.builtin.shell: >
        set -o nounset -o pipefail -o errexit &&
        (smbclient -U {{ item.value.name }}%'{{ item.value.password }}' -L 127.0.0.1 2>&1 > /dev/null)
        || (echo '{{ item.value.password }}'; echo '{{ item.value.password }}')
        | smbpasswd {{ item.value.name }}
      args:
        executable: /bin/bash
      no_log: true
      register: samba_verify_users
      changed_when: "'New SMB password' in samba_verify_users.stdout"
      loop: "{{ samba_users | dict2items }}"

    - name: Restart samba server
      ansible.builtin.systemd_service:
        name: smb.service
        state: restarted

- name: Setup sanoid/syncoid zfs backup orchestration
  become: true
  block:
    - name: Install sanoid packages
      ansible.builtin.apt:
        name:
          - sanoid
          - lz4
        update_cache: true
        state: present

    - name: Ensure sanoid configuration folder is present
      ansible.builtin.file:
        path: /etc/sanoid
        owner: root
        group: root
        mode: "0755"
        state: directory

    - name: Setup sanoid configuration file
      ansible.builtin.copy:
        src: files/sanoid.sanoid.conf
        dest: /etc/sanoid/sanoid.conf
        owner: root
        group: root
        mode: "0644"

    - name: Setup sanoid group
      ansible.builtin.group:
        name: "{{ sanoid_user_name }}"
        system: true
        state: present

    - name: Setup sanoid user
      ansible.builtin.user:
        name: "{{ sanoid_user_name }}"
        group: "{{ sanoid_user_name }}"
        password: "{{ sanoid_user_pass }}"
        shell: /bin/bash
        create_home: true
        state: present

    - name: Setup sanoid sudoers rule
      community.general.sudoers:
        name: "{{ sanoid_user_name }}"
        user: "{{ sanoid_user_name }}"
        host: ALL
        runas: root
        nopassword: true
        commands:
          - /usr/bin/zfs
          - /usr/sbin/zfs
        state: present

    - name: "Add SSH authorised key for user: {{ debian_user_name }}"
      ansible.posix.authorized_key:
        user: "{{ sanoid_user_name }}"
        key: "{{ sanoid_ssh_public_key }}"
        state: present

- name: Setup scrutiny spoke for disk SMART monitoring
  ansible.builtin.import_tasks: ../scrutiny/deploy.yaml
